// Generated by CoffeeScript 1.10.0
(function() {
  var App, Client, ServerActions, log,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log = function() {
    return console.log.apply(console, arguments);
  };

  Client = (function() {
    function Client(server) {
      this.server = server;
      this["do"] = bind(this["do"], this);
      this.onCardLoaded = bind(this.onCardLoaded, this);
      this.onError = bind(this.onError, this);
      this.onDone = bind(this.onDone, this);
      this.onMessage = bind(this.onMessage, this);
      this.updateBesties = bind(this.updateBesties, this);
      this.migrateS3 = bind(this.migrateS3, this);
      this.resetUser = bind(this.resetUser, this);
      this.deleteUser = bind(this.deleteUser, this);
      this.deleteCard = bind(this.deleteCard, this);
      this.createOrUpdateCard = bind(this.createOrUpdateCard, this);
      this.loadCard = bind(this.loadCard, this);
      $('#cardId').on('submit', this.loadCard);
      $('#loadCard').on('click', this.loadCard);
      $('#cardDetail').on('submit', this.createOrUpdateCard);
      $('#deleteCard').on('submit', this.deleteCard);
      $('#resetUser').on('submit', this.resetUser);
      $('#deleteUser').on('submit', this.deleteUser);
      $('#script_migrateS3').on('submit', this.migrateS3);
      $('#script_updateBesties').on('submit', this.updateBesties);
      $('#card .imageUrl').change(this.showImage);
      this.server.io.on('message', this.onMessage);
      this.server.io.on('done', this.onDone);
      this.server.io.on('error', this.onError);
      this.server.io.on('cardLoaded', this.onCardLoaded);
    }


    /* Actions */

    Client.prototype.loadCard = function(e) {
      var cardId;
      e.preventDefault();
      cardId = $('#cardId input[name="objectId"]').val();
      return this["do"]('loadCard', {
        id: cardId,
        section: 'loadCard'
      });
    };

    Client.prototype.createOrUpdateCard = function(e) {
      var data, ref;
      data = {
        card: $('#cardDetail').serializeObject(),
        section: 'card'
      };
      if (((ref = data.card.objectId) != null ? ref.length : void 0) > 0) {
        log("upadating card:", data);
        this["do"]('updateCard', data);
      } else {
        log("creating card:", data);
        this["do"]('createCard', data);
      }
      return e.preventDefault();
    };

    Client.prototype.deleteCard = function(e) {
      var cardId;
      cardId = $('#deleteCard input[name="cardId"]').val();
      log("deleting card " + cardId);
      this["do"]('deleteCard', {
        section: 'deleteCard',
        cardId: cardId
      });
      return e.preventDefault();
    };

    Client.prototype.deleteUser = function(e) {
      var userId;
      userId = $('#deleteUser input[name="userId"]').val();
      log("deleting user " + userId);
      this["do"]('deleteUser', {
        section: 'deleteUser',
        userId: userId
      });
      return e.preventDefault();
    };

    Client.prototype.resetUser = function(e) {
      var userId;
      userId = $('#resetUser input[name="userId"]').val();
      log("resetting user " + userId);
      this["do"]('resetUser', {
        section: 'resetUser',
        userId: userId
      });
      return e.preventDefault();
    };

    Client.prototype.migrateS3 = function(e) {
      log("migrating image content to S3");
      this["do"]('migrateImagesToS3', {
        section: 'scripts'
      });
      return e.preventDefault();
    };

    Client.prototype.updateBesties = function(e) {
      log("updating bestie scores");
      this["do"]('updateBesties', {
        section: 'scripts'
      });
      return e.preventDefault();
    };


    /* Server Listeners */

    Client.prototype.onMessage = function(data) {
      return log("server: ", data);
    };

    Client.prototype.onDone = function(arg) {
      var data, message, results, section;
      data = arg.data, results = arg.results, message = arg.message;
      section = data.section;
      $("#" + section + " .message").html(message).parent().addClass('has-success');
      log(data.section + " done!", data);
      return this.resetForm(section);
    };

    Client.prototype.onError = function(data) {
      var fullMessage, message, ref, ref1, ref2;
      message = (ref = (data != null ? (ref1 = data.error) != null ? ref1.message : void 0 : void 0) || (data != null ? (ref2 = data.error) != null ? ref2.error : void 0 : void 0)) != null ? ref : 'Unknown error occurred';
      fullMessage = "ERROR: " + message + " (see server output for details)";
      return this.error(data.data.section, fullMessage);
    };

    Client.prototype.onCardLoaded = function(data) {
      var choice, i, j, len, ref, results1;
      this.resetForm('card');
      $('#card input[name="objectId"]').val(data.objectId);
      $('#card input[name="question"]').val(data.question);
      data.choices = _.values(data.choices);
      ref = data.choices;
      results1 = [];
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        choice = ref[i];
        $('#card input[name="choices[' + i + '][text]"]').val(choice.text);
        $('#card input[name="choices[' + i + '][image][meta][url]"]').val(choice.image.meta.url);
        $('#card input[name="choices[' + i + '][image][meta][source]"]').val(choice.image.meta.source);
        $('#card input[name="choices[' + i + '][image][meta][credit]"]').val(choice.image.meta.credit);
        results1.push($("#card_answer" + i + "_image")[0].src = choice.image.meta.url);
      }
      return results1;
    };


    /* Helpers */

    Client.prototype.error = function(section, message) {
      console.error(message);
      return $("#" + section + " .message").html(message).parent().addClass('has-error').removeClass('has-success');
    };

    Client.prototype["do"] = function(task, data) {
      var err, error;
      this.resetStyles(data.section);
      this.showWorkingMessage(data.section);
      try {
        return this.server["do"](task, data);
      } catch (error) {
        err = error;
        return this.error(data.section, err.message);
      }
    };

    Client.prototype.showWorkingMessage = function(section) {
      return $("#" + section + " .message").html("working ...");
    };

    Client.prototype.resetForm = function(section) {
      return $("#" + section + " form").each(function() {
        return this.reset();
      });
    };

    Client.prototype.resetStyles = function(section) {
      return $("#" + section + " .message").parent().removeClass('has-success').removeClass('has-error');
    };

    Client.prototype.showImage = function() {
      var i;
      i = $(this).data('index');
      return $("#card_answer" + i + "_image")[0].src = this.value;
    };

    return Client;

  })();

  ServerActions = (function() {
    function ServerActions() {
      this["do"] = bind(this["do"], this);
      this.io = window.io.connect();
      this.io.emit('ready');
    }

    ServerActions.prototype["do"] = function(task, data) {
      if (this[task] != null) {
        return this[task](data);
      } else {
        return this.io.emit(task, data);
      }
    };

    ServerActions.prototype._cleanupCard = function(card) {
      var choice, i, j, len, ref;
      ref = card.choices;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        choice = ref[i];
        if (_.isEmpty(choice.text) && _.isEmpty(choice.image.meta.url)) {
          card.choices[i] = void 0;
        } else {
          choice.image.small = choice.image.meta.url;
          choice.image.big = choice.image.meta.url;
        }
      }
      return card.choices = _.compact(card.choices);
    };

    ServerActions.prototype._validateCard = function(card) {
      if (_.isEmpty(card.question)) {
        throw new Error('Please enter a question');
      }
      if (card.choices.length < 2) {
        throw new Error('Please enter 2+ choices');
      }
    };

    ServerActions.prototype.updateCard = function(data) {
      this._cleanupCard(data.card);
      this._validateCard(data.card);
      return this.io.emit('updateCard', data);
    };

    ServerActions.prototype.createCard = function(data) {
      this._cleanupCard(data.card);
      this._validateCard(data.card);
      return this.io.emit('createCard', data);
    };

    return ServerActions;

  })();

  App = (function() {
    function App() {
      this.server = new ServerActions;
      this.client = new Client(this.server);
      this.initRouting();
    }

    App.prototype.initRouting = function() {
      window.onhashchange = this.hashChange;
      if (window.location.hash) {
        return this.hashChange();
      }
    };

    App.prototype.hashChange = function() {
      var page;
      page = window.location.hash || '#home';
      log("showing page " + page);
      $(".page").hide();
      return $(page).show();
    };

    return App;

  })();

  $(document).ready(function() {
    return window.App = new App();
  });

}).call(this);
