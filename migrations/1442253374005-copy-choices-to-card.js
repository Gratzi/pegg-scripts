// Generated by CoffeeScript 1.9.3
(function() {
  var Parse, PeggAdmin, Promise, _, config, env,
    hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  Promise = require('bluebird');

  Parse = require('node-parse-api').Parse;

  PeggAdmin = require('../server/run/peggAdmin');

  config = require('../server/run/config');

  env = process.env.NODE_ENV || 'development';

  config.setEnvironment(env);

  exports.up = function(next) {
    var choices, db;
    db = new PeggAdmin(config.PARSE_APP_ID, config.PARSE_MASTER_KEY, config.FILE_PICKER_ID);
    choices = [];
    db.on('results', (function(_this) {
      return function(results) {
        console.log("got " + results.length + " choices");
        return choices = choices.concat(results);
      };
    })(this));
    return db.findRecursive('Choice', {
      limit: 50,
      skip: 0,
      where: {
        version: null
      }
    }).then((function(_this) {
      return function() {
        var card, cardId, cards;
        console.log(choices.length + " total choices");
        console.log("choice looks like: " + (JSON.stringify(_.first(choices), null, 2)));
        cards = _.groupBy(choices, function(choice) {
          var ref;
          return choice != null ? (ref = choice.card) != null ? ref.objectId : void 0 : void 0;
        });
        console.log((_.values(cards).length) + " total cards");
        console.log("card looks like: " + (JSON.stringify(_.first(_.values(cards)), null, 2)));
        for (cardId in cards) {
          if (!hasProp.call(cards, cardId)) continue;
          card = cards[cardId];
          cards[cardId] = _.map(card, function(choice) {
            return {
              text: choice.text,
              image: choice.blob || {
                big: choice.image,
                small: choice.image,
                meta: {
                  url: choice.image,
                  source: choice.imageSource,
                  credit: choice.imageCredit
                }
              }
            };
          });
        }
        return console.log("card looks like: " + (JSON.stringify(_.first(_.values(cards)), null, 2)));
      };
    })(this)).then(next);
  };

  exports.down = function(next) {
    return next();
  };

}).call(this);
